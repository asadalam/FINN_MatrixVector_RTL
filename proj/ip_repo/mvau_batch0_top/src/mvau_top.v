/*
 * Module: MVAU Top Level Verilog Wrapper (mvau)
 * 
 * Author(s): Syed Asad Alam <syed.asad.alam@tcd.ie>
 * 
 * This file lists an RTL implementation of the matrix-vector activation unit
 * It is part of the Xilinx FINN open source framework for implementing
 * quantized neural networks on FPGAs
 *
 * This material is based upon work supported, in part, by Science Foundation
 * Ireland, www.sfi.ie under Grant No. 13/RC/2094 and, in part, by the 
 * European Union's Horizon 2020 research and innovation programme under the 
 * Marie Sklodowska-Curie grant agreement Grant No.754489. 
 * 
 * Inputs:
 * aresetn  - Active low synchronous reset
 * aclk    - Main clock
 * s0_axis_tready - Input ready which tells that the MVAU unit is ready to receive data
 * [TI-1:0] m0_axis_tdata - Input stream, word length TI=TSrcI*SIMD
 * m0_axis_tvalid - Input valid, indicates valid input
 * 
 * Outputs:
 * m0_axis_tready - Output ready which tells the predecessor logic to start providing data
 * s0_axis_tvalid        - Output stream valid
 * [TO-1:0] s0_axis_tdata - Output stream, word length TO=TDstI*PE 
 * 
 * Parameters:
 * KDim                                         - Kernel dimensions 
 * IFMCh                                        - Input feature map channels
 * OFMCh                                        - Output feature map channels
 * IFMDim		                            - Input feature map dimensions
 * PAD                                          - Padding around the input feature map
 * STRIDE		                            - Number of pixels to move across when applying the filter
 * OFMDim=(IFMDim-KDim+2*PAD)/STRIDE+1          - Output feature map dimensions
 * MatrixW=KDim*KDim*IFMCh                      - Width of the input matrix
 * MatrixH=OFMCh                                - Heigth of the input matrix
 * SIMD                                         - Number of input columns computed in parallel
 * PE                                           - Number of output rows computed in parallel
 * WMEM_DEPTH=(KDim*KDim*IFMCh*OFMCh)/(SIMD*PE) - Depth of each weight memory
 * MMV                                          - Number of output pixels computed in parallel
 * TSrcI                                        - DataType of the input activation (as used in the MAC)
 * TSrcI_BIN = 0                                - Indicates whether the 1-bit TSrcI is to be interpreted as special +1/-1 or not
 * TDstI                                        - DataType of the output activation (as generated by the activation)
 * TI                                           - SIMD times the word length of input stream
 * TO                                           - PE times the word length of output stream
 * TW                                           - Word length of individual weights
 * TW_BIN                                       - Indicates whether the 1-bit TW is to be interpreted as special +1/-1 or not
 * TA                                           - PE times the word length of the activation class (e.g thresholds)
 * OP_SGN                                       - Enumerated values showing signedness/unsignedness of input activation/weights
 * DSP_TRUE                                     - Use DSP blocks or LUTs for MAC (future extension)
 * INST_WMEM                                    - Instantiate weight memory; if needed
 * MVAU_STREAM                                  - Top module is not MVAU Stream
 * USE_ACT                                      - Use activation after matrix-vector activation
 * */
 
`timescale 1ns/1ns
// Package file for parameters
 
module mvau_top #(
   parameter integer KDim=1, // Kernel dimensions
   parameter integer IFMCh=600,// Input feature map channels
   parameter integer OFMCh=64,// Output feature map channels or the number of filter banks
   parameter integer IFMDim=1, // Input feature map dimensions
   parameter integer PAD=0,    // Padding around the input feature map
   parameter integer STRIDE=1, // Number of pixels to move across when applying the filter
   parameter integer OFMDim=(IFMDim-KDim+2*PAD)/STRIDE+1, // Output feature map dimensions
   parameter integer MatrixW=KDim*KDim*IFMCh,   // Width of the input matrix
   parameter integer MatrixH=OFMCh, // Heigth of the input matrix
   parameter integer SIMD=600, // Number of input columns computed in parallel
   parameter integer PE=64, // Number of output rows computed in parallel
   parameter integer WMEM_DEPTH=(KDim*KDim*IFMCh*OFMCh)/(SIMD*PE), // Depth of each weight memory
   parameter integer MMV=1, // Number of output pixels computed in parallel
   parameter integer TSrcI=2, // DataType of the input activation (as used in the MAC)
   parameter integer TSrcI_BIN = 0, // Indicates whether the 1-bit TSrcI is to be interpreted as special +1/-1 or not
   parameter integer TI=SIMD*TSrcI, // SIMD times the word length of input stream
   parameter integer TW=2, // Word length of individual weights
   parameter integer TW_BIN = 0, // Indicates whether the 1-bit TW is to be interpreted as special +1/-1 or not
   parameter integer TDstI=11, // DataType of the output activation (as generated by the activation) 
   parameter integer TO=PE*TDstI, // PE times the word length of output stream   
   parameter integer TA=11, // PE times the word length of the activation class (e.g thresholds)
   parameter integer OP_SGN=2, // Enumerated values showing signedness/unsignedness of input activation/weights
   parameter integer DSP_TRUE=0, // Use DSP blocks or LUTs for MAC
   parameter integer INST_WMEM=1, // Instantiate weight memory, if needed
   parameter integer MVAU_STREAM=0, // Top module is not MVAU Stream
   parameter integer USE_ACT=0)     // Use activation after matrix-vector activation
(    
 		 input  	       aresetn, // active low synchronous reset
 		 input  	       aclk, // main clock
 
 		 // Axis Stream interface
 		 input  	  m0_axis_tready,
 		 output  	  s0_axis_tready,
 		 
 		 input  [TI-1:0]  s0_axis_tdata, // input stream
 		 input  	  s0_axis_tvalid, // input valid
 		 output  	  m0_axis_tvalid, // Output valid
 		 output  [TO-1:0] m0_axis_tdata); //output stream
 
   mvau #(
   .KDim       (KDim      ), 
   .IFMCh	   (IFMCh     ), 
   .OFMCh	   (OFMCh     ), 
   .IFMDim     (IFMDim    ), 
   .PAD	   (PAD       ), 
   .STRIDE     (STRIDE    ), 
   .OFMDim     (OFMDim    ), 
   .MatrixW    (MatrixW   ), 
   .MatrixH    (MatrixH   ), 
   .SIMD	   (SIMD      ), 
   .PE	   (PE        ), 
   .WMEM_DEPTH (WMEM_DEPTH), 
   .MMV	   (MMV       ), 
   .TSrcI	   (TSrcI     ), 
   .TSrcI_BIN  (TSrcI_BIN ), 
   .TI	   (TI        ), 
   .TW	   (TW        ), 
   .TW_BIN     (TW_BIN    ), 
   .TDstI	   (TDstI     ), 
   .TO	   (TO        ), 
   .TA	   (TA        ), 
   .OP_SGN     (OP_SGN    ), 
   .DSP_TRUE   (DSP_TRUE  ), 
   .INST_WMEM  (INST_WMEM ), 
   .MVAU_STREAM(MVAU_STREAM),
   .USE_ACT    (USE_ACT   )) 
   mvau_inst(
 		  .aresetn(aresetn),
 		  .aclk(aclk),
 		  .rready(m0_axis_tready),
 		  .wready(s0_axis_tready),
 		  .in(s0_axis_tdata),
 		  .in_v(s0_axis_tvalid),
 		  .out_v(m0_axis_tvalid),
 		  .out(m0_axis_tdata)
 		  );
      
endmodule // mvau_top

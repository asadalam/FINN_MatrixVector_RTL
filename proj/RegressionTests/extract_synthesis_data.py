import numpy as np
import pandas as pd
import argparse
from sys import exit

def extract_hls_data(log_file,param):
    block = []
    tp = 0
    try:
        print("Extracting data from HLS log file")

        with open(log_file) as log_line:
            for line in log_line:
                for p in param:
                    if p in line:
                        block.append(int(float(line.split()[1])))
                if "CP achieved post-synthesis" in line:
                    tp = round((float(line.split()[-1]))*10**3)/10**3                    

        return block, tp
    
    except:
        print("Cannot read the HLS reports file")
        raise
        exit(1)

def extract_rtl_block_data(log_file,param):
    block = []
    try:
        print("Extracting data from RTL utilization report")

        with open(log_file) as log_line:
            for line in log_line:
                line = line.rstrip()
                for p in param:
                    if p in line:
                        if(len(line.split("|")) > 1):
                            block.append(int(float(line.split("|")[2])))

        return block
    
    except:
        print("Cannot read the RTL utilization report")
        raise
        exit(1)

def extract_rtl_timing_data(log_file, clk_per):
    tp = 0
    try:
        print("Extracting data from RTL timing report")

        with open(log_file) as log_line:
            tp = float(log_line.read().rsplit()[-1])

        return round((clk_per-tp)*10**3)/10**3
    except:
        print("Cannot read the RTL timing report")
        raise
        exit(1)

def calc_savings(hls_lst, rtl_lst):
    sv_lst = []
    for sv in zip(hls_lst,rtl_lst):
        if(sv[0] == 0 or sv[1] == 0):
            sv_lst.append(0)
        else:
            sv_lst.append(round(((sv[0] - sv[1])/sv[0]*100)*10**2)/10**2)
    return sv_lst



def parser():
    parser = argparse.ArgumentParser(description='Python data script for Toom Cook 1D convolution using Chebyshev nodes')
    parser.add_argument('--hls_run',default='mvau_stream_std',
                        help="Type of HLS run executed")
    parser.add_argument('--rtl_run',default='mvau_stream',
                        help="TYPE of RTL run executed")
    parser.add_argument('--clk', default=5.0,
                        help='Min. clock period required')
    parser.add_argument('-o','--out_file',required=True,
                        help="Output file to be writte to")
    return parser


if __name__ == '__main__':

    # Reading the arguments passed to this script
    args = parser().parse_args()    
    hls_run = args.hls_run
    rtl_run = args.rtl_run
    clk_per = args.clk
    main(hls_run, rtl_run, clk_per)
    
def main(hls_run, rtl_run, clk_per):
    extract(hls_run, rtl_run, clk_per):

def extract(hls_run, rtl_run, clk_per):
    # Directory from where HLS reports to be read
    hls_syn_dir = hls_run.replace("_","-")
    hls_dir = "../../finn-hlslib/tb/hls-syn-"+hls_syn_dir+"/sol1/impl/report/verilog/"
    # Constructing HLS report filename
    hls_logfile = hls_dir+"Testbench_"+hls_run+"_export.rpt"

    # Directory from where RTL reports to be read
    rtl_dir = rtl_run+"_project/"
    # Constructing RTL reports filename
    rtl_utilfile = rtl_dir+"post_opt_util.rpt"
    rtl_timefile = rtl_dir+"post_opt_timing.rpt"

    # Parameters for which HLS data needs to be extracted
    hls_param = ["LUT","FF","DSP","BRAM"]
    # Extracting data from HLS report file (generated by RTL export)
    hls_block, hls_tp = extract_hls_data(hls_logfile,hls_param)

    # Parameters for which RTL data needs to be extracted
    rtl_param = ["CLB LUTs","CLB Registers","DSPs","Block RAM Tile"]
    # Extracting data from RTL utilization report file
    rtl_block = extract_rtl_block_data(rtl_utilfile,rtl_param)
    # Extracting data from RTL timing report file
    rtl_tp = extract_rtl_timing_data(rtl_timefile,clk_per)

    hls_lst = hls_block + [hls_tp]
    rtl_lst = rtl_block + [rtl_tp]
    sv_lst = calc_savings(hls_lst, rtl_lst)
    pd_lst = hls_lst + rtl_lst+sv_lst

    return pd_lst

    # Columns names for CSV file
    # col_names = []
    # for h in hls_param:
    #     col_names.append("HLS "+h)
    # col_names.append("HLS Time")
    # for r in rtl_param:
    #     col_names.append("RTL "+r)
    # col_names.append("RTL Time")
    
    # write_data(hls_block, hls_tp, rtl_block, rtl_tp, col_names, args.out_file)

    exit(0)

